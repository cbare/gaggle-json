<h1>Gaggle-JSON Documentation</h1>

<p>Gaggle-JSON is a dialect of JSON that expands on the capabilities
  of the original Gaggle adding language independence, flexibility, and
  easy integration with modern ReSTful web architectures. By concentrating
  on the definition of data structures and remaining agnostic (like SOAP) of
  the transport protocol (HTTP, AMQP, etc.), we preserve flexibility for the
  developer. Because Gaggle-JSON is simply a dialect of JSON, it works across
  languages and new data types can easily be added without recompiling and
  plays nicely with ReSTful web APIs.</p>

<p>Here we document the data types and how they are represented in JSON. We
  also provide some sample code and point out areas for further development.</p>

<p>Please consider this format a work-in-progress and still experimental at
  this stage. Your feedback will help improve the protocol!</p>

<h2>JSON formats for Gaggle data types</h2>

<ul>
  <li><a href="/example/namelist">namelist</a></li>
  <li><a href="/example/matrix">matrix</a></li>
  <li><a href="/example/network">network</a></li>
  <li><a href="/example/table">table</a></li>
  <li><a href="/example/tuple">tuple</a></li>
</ul>

<h2>Using Gaggle-JSON</h2>

<h3>Whiteboard demo / ReST API</h3>
<p>ReSTful web APIs are becoming a standard way of exchanging structured data
  on the web. The <a href="/projects_app">Whiteboard</a> sample application
  demonstrates <a href="/projects_api">ReST-style access to Gaggle data objects</a>.</p>

<h4>Sample Client Code</h4>
<ul>
  <li><a href="/examples/client/python/gaggle_json_client.py">Python</a></li>
  <li><a href="/examples/client/R/gaggleJSON.R">R</a></li>
  <li>Java ...todo</li>
</ul>


<h3>Message Queueing</h3>
<p>...todo...</p>

<h3>Handling big data</h3>
<p>Several strategies are under consideration for handling larger data objects.</p>
<ul>
  <li>base 64 encoding matrices of floating point numbers</li>
  <li>streaming apis, mature in XML, less so in JSON</li>
  <li>pass-by-reference - URIs, reference to shared files or DBs</li>
</ul>

<h3>Pass-by-reference</h3>
<p>Although Gaggle can successfully handle many megabytes of data, passing large
  objects over a messaging system is not ideal. For larger objects, passing by
  reference save duplication and keeps the burden of dealing with large quantities
  of data on databases and servers where it belongs.</p>

<p>There are a handful of existing applications where Gaggle messaging is used to
  transmit references to data, rather than the data itself, either in the form of
  a URL or a database connection string. Passing URLs is quite easily generalized,
  but database connections are dependent on the details of the RDBMS software used
  and the schema of the particular database, and have, so far, been purpose
  specific.</p>

